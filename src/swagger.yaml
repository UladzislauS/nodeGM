---
swagger: "2.0"
info:
  description: "This is a server for Node Mentoring.\n"
  version: "1.0.0"
  title: "Swagger Node Mentoring"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "UladzislauS@gmail.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "virtserver.swaggerhub.com"
basePath: "/UladzislauS6/api/1.0.0"
tags:
- name: "Products"
  description: "Everything about your Products"
- name: "Cities"
  description: "Everything about your Cities"
- name: "Users"
  description: "Operations with users"
schemes:
- "https"
- "http"
paths:
  /api/products:
    get:
      tags:
      - "Products"
      description: "Get all products"
      operationId: "getProducts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        403:
          description: "Token validation exception"
    post:
      tags:
      - "Products"
      description: "Add a new product"
      operationId: "addProduct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New product"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
  /api/products/{id}:
    get:
      tags:
      - "Products"
      description: "Get product by id"
      operationId: "getProductById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id value"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
        400:
          description: "Invalid id value"
    delete:
      tags:
      - "Products"
      description: "Remove product by id"
      operationId: "removeProductById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id value"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
        400:
          description: "Invalid id value"
  /api/products/{id}/reviews:
    get:
      tags:
      - "Products"
      description: "Get product reviews by product id"
      operationId: "getProductReviewsById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id value"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
        400:
          description: "Invalid id value"
  /api/cities:
    get:
      tags:
      - "Cities"
      description: "Get cities"
      operationId: "getAllCities"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/City"
        400:
          description: "Invalid id value"
    post:
      tags:
      - "Cities"
      description: "Add new city"
      operationId: "addNewCity"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New city"
        required: true
        schema:
          $ref: "#/definitions/City"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
        400:
          description: "Invalid id value"
  /api/cities/{id}:
    get:
      tags:
      - "Cities"
      description: "Get city by id"
      operationId: "getCityById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id value"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
        400:
          description: "Invalid id value"
    put:
      tags:
      - "Cities"
      description: "Update city by id"
      operationId: "updateCityById"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated city"
        required: true
        schema:
          $ref: "#/definitions/City"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
        400:
          description: "Invalid id value"
    delete:
      tags:
      - "Cities"
      description: "Remove city by id"
      operationId: "removeCityById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id value"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
        400:
          description: "Invalid id value"
  /api/users:
    get:
      tags:
      - "Users"
      summary: "List of users"
      description: "List of users."
      operationId: "getUsers"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        403:
          description: "Token validation exception"
  /api/users/{id}:
    delete:
      tags:
      - "Users"
      summary: "Delete user by user id"
      operationId: "deleteUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the user that needs to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
definitions:
  User:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    example:
      name: "name"
      id: 0
  Product:
    type: "object"
    required:
    - "reviews"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "doggie"
      reviews:
        type: "number"
      lastModifiedDate:
        type: "string"
    example:
      reviews: 6.02745618307040320615897144307382404804229736328125
      lastModifiedDate: "lastModifiedDate"
      id: 0
      title: "doggie"
  City:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "string"
      name:
        type: "string"
        example: "Minsk"
      country:
        type: "string"
      capital:
        type: "boolean"
      location:
        type: "object"
        properties: {}
    example:
      country: "country"
      capital: true
      name: "Minsk"
      location: "{}"
      id: 0
